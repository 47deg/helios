repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    compile project(":helios-core")
    compile project(":helios-meta")
    compile project(":helios-parser")
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.0"
    compile 'com.beust:klaxon:3.0.11'
    compile 'com.tomatobean:jsonparser:1.0.10'
    compile 'com.squareup.moshi:moshi-kotlin:1.8.0'
    compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7"
    compile "com.jsoniter:jsoniter:0.9.23"
    compile "org.apache.commons:commons-csv:1.5"
    kapt "io.arrow-kt:arrow-annotations-processor:$arrowVersion"
    kapt project(':helios-meta-compiler')

}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'

jmh {
    resultFormat = 'csv'
    resultsFile = file('build/reports/benchmarks.csv')
    timeOnIteration = '1s'
    if (project.hasProperty("jmhInclude"))
        include = [jmhInclude]
    if (project.hasProperty("jmhResultsFile"))
        resultsFile = file(jmhResultsFile)
}

task updateMasterBenchmark {
    jmh {
        resultFormat = 'csv'
        resultsFile = file('build/reports/benchmarks.csv')
        timeOnIteration = '1s'
        include = [helios.benchmarks.HeliosBenchmark]
        resultsFile = file('src/jmh/resources/master_benchmark.csv')
    }
    doLast {
        jmh
    }
}

task executeHeliosBenchmark {
    jmh {
        resultFormat = 'csv'
        resultsFile = file('build/reports/benchmarks.csv')
        timeOnIteration = '1s'
        include = [helios.benchmarks.HeliosBenchmark]
        resultsFile = file('src/jmh/resources/helios_benchmark.csv')
    }
    doLast {
        jmh
    }
}

task executeBenchmarks {
    jmh {
        resultFormat = 'csv'
        resultsFile = file('build/reports/benchmarks.csv')
        timeOnIteration = '1s'
    }
    doLast {
        jmh
    }
}
